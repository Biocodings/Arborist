cdef class PyPredict:
    @staticmethod
    def Regression(np.ndarray[double, ndim=1, mode="c"] _blockNumT not None,
        np.ndarray[int, ndim=1, mode="c"]  _blockFacT not None,
        _nPredNum,
        _nPredFac,
        vector[ForestNode] &_forestNode,
        _origin,
        _facOff,
        _facSplit,
        _leafOrigin,
        vector[LeafNode] &_leafNode,
        vector[BagRow] &_bagRow,
        _rank,
        yRanked,
        yPred,
        bagTrain):
        return Predict_Regression(&_blockNumT[0],
            &_blockFacT[0],
            nPredNum,
            _nPredFac,
            vector[ForestNode] &_forestNode,
            _origin,
            _facOff,
            _facSplit,
            _leafOrigin,
            vector[LeafNode] &_leafNode,
            vector[BagRow] &_bagRow,
            _rank,
            yRanked,
            yPred,
            bagTrain)

    @staticmethod
    def Quantiles(np.ndarray[double, ndim=1, mode="c"] _blockNumT not None,
        np.ndarray[int, ndim=1, mode="c"]  _blockFacT not None,
        _nPredNum,
        _nPredFac,
        vector[ForestNode] &_forestNode,
        _origin,
        _facOff,
        _facSplit,
        _leafOrigin,
        vector[LeafNode] &_leafNode,
        vector[BagRow] &_bagRow,
        _rank,
        yRanked,
        yPred,
        quantVec,
        qBin,
        qPred,
        bagTrain):
        return Regression_Quantiles(&_blockNumT[0],
            &_blockFacT[0],
            _nPredNum,
            _nPredFac,
            vector[ForestNode] &_forestNode,
            _origin,
            _facOff,
            _facSplit,
            _leafOrigin,
            vector[LeafNode] &_leafNode,
            vector[BagRow] &_bagRow,
            _rank,
            yRanked,
            yPred,
            quantVec,
            qBin,
            qPred,
            bagTrain)

    @staticmethod
    def Classification(np.ndarray[double, ndim=1, mode="c"] _blockNumT not None,
        np.ndarray[int, ndim=1, mode="c"]  _blockFacT not None,
        _nPredNum,
        _nPredFac,
        vector[ForestNode] &_forestNode,
        _origin,
        _facOff,
        _facSplit,
        _leafOrigin,
        vector[LeafNode] &_leafNode,
        vector[BagRow] &_bagRow,
        _leafInfoCtg,
        yPred,
        np.ndarray[int, ndim=1, mode="c"]  _census not None,
        _yTest,
        np.ndarray[int, ndim=1, mode="c"]  _conf not None,
        _error,
        np.ndarray[double, ndim=1, mode="c"] _prob not None,
        bagTrain):
        return Regression_Classification(&_blockNumT[0],
            int *_blockFacT,
            _nPredNum,
            _nPredFac,
            vector[ForestNode] &_forestNode,
            _origin,
            _facOff,
            _facSplit,
            _leafOrigin,
            vector[LeafNode] &_leafNode,
            vector[BagRow] &_bagRow,
            _leafInfoCtg,
            yPred,
            &_census[0],
            _yTest,
            &_conf[0],
            _error,
            &_prob[0],
            bagTrain)
